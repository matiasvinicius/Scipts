1:20
pi:10
15:1
?:
:?
?:
?':'
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2))
rep(c(0,1,2), times=10)
rep(c(0, 1, 2), each = 10)
c(0.5,55,-10.6)
c(0.5,55L,-10.6)
c(0.5,55L,-10,6)
c(0.5, 55L, -10, 6)
?c
c(0.5, 55, -10, 6)
num_vect(0.5, 55, -10, 6)
c(0.5, 55L, -10L, 6)
num_vect <- c(0.5, 55L, -10L, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
mmy_char
my_char
paste(my_char, colapse = " ")
paste(my_char, collapse = " ")
C(my_char, "Vinicius")
my_name <- C(my_char, "Vinicius")
my_name <- c(my_char, "Vinicius")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
c(44, Na, 5 NA)
c(44, NA, 5 NA)
c(44, NA, 5, NA)
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 100)
z <- rep(NA, 1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:100]
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-21 -10)]
x[c(-21, -10)]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vvect)
names(vvect)
names(vect)
c(11,2,NA)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class
(my_vecotr)
class
(my_vector)
class(my_vector)
my_matrix <- my_vector
?matrix
matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)0
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
my_matrix2 <- as.matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
c("age", "weight", "bp", "rating", "test")
cnames <- c("age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
5 + 7
x <- 5+7
x
y <- x-3
y
c(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
c(z,555)
c(z,555,z)
x*2+100
x * 2 + 100
z * 2 + 100
my_sqrt <- z-1
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
exit
exit()
swirl()
create_package("~/Ãrea de Trabalho\Data_Science\Packages")
create_package("~/Área de Trabalho\Data_Science\Packages")
create_package("~/Área de Trabalho/Data_Science/Packages")
library(devtools)
library(tidyverse)
library(fs)
create_package("~/Área de Trabalho/Data_Science/Packages")
create_package("~/OneDrive/Biblioteca/Documentos/Área de Trabalho/Data_Science/Packages")
create_package("~/OneDrive/Biblioteca/Documentos/Área de Trabalho/
Data_Science/Packages/foofactors")
create_package("~/OneDrive/Biblioteca/Documentos/Área de Trabalho/Data_Science/Packages/foofactors")
create_package("~/Packages/foofactors")
setwd("C:/Users/vinic/Downloads/rprog_data_ProgAssignment3-data")
#Take the hospital from every state that are ranked at "num" position of Lowest mortality of "outcome"
rankall <- function(outcome, num = "best") {
source("validateParameters.R")
source("splitDataset.R")
source("chooseRankHospital.R")
dataset<- read.csv("outcome-of-care-measures.csv", colClasses = "character")
validateParameters(dataset, state, outcome)
#If the outcome is "heart attack", the collumn 13 of this dataset will return us the
#Lower Mortality Estimate by heart attack in 30 days
if(outcome == "heart attack"){
splitData <- splitDataset(dataset, 11)
}
else if (outcome == "heart failure"){
splitData <- splitDataset(dataset, 17)
}
else{
splitData <- splitDataset(dataset, 23)
}
#Remove missing data
missingData <- is.na(as.numeric(splitData[,3]))
missingData
splitData <- splitData[!missingData,]
return(splitData)
}
head(rankall("heart failure", "best"))
?tapply
#Take the hospital from every state that are ranked at "num" position of Lowest mortality of "outcome"
rankall <- function(outcome, num = "best") {
source("splitDataset.R")
source("chooseRankHospital.R")
dataset<- read.csv("outcome-of-care-measures.csv", colClasses = "character")
validStates<- unique(dataset$State)
#Verify if outcome or state are invalid
if(!is.element(outcome, c("heart attack", "heart failure", "pneumonia"))){
stop("invalid outcome")
}
#If the outcome is "heart attack", the collumn 13 of this dataset will return us the
#Lower Mortality Estimate by heart attack in 30 days
if(outcome == "heart attack"){
splitData <- splitDataset(dataset, 11)
}
else if (outcome == "heart failure"){
splitData <- splitDataset(dataset, 17)
}
else{
splitData <- splitDataset(dataset, 23)
}
#Remove missing data
missingData <- is.na(as.numeric(splitData[,3]))
missingData
splitData <- splitData[!missingData,]
columnState <- c()
columnHospitalName <- c()
i <- 1
while (i <- length(validStates)){
currentState <- splitData$State == validStates[i]
currentData <- splitData[currentState,]
currentData <- currentData[order(currentData[,1]),]
currentData <- currentData[order(as.numeric(currentData[,3])),]
columnHospitalName <- c(columnHospitalName, chooseRankHospital(currentData, num))
columnState <- c(columnState, validStates[i])
i <- i + 1
}
return(columnHospitalName)
}
head(rankall("heart attack", 20), 10)
x <- head(rankall("heart attack", 20), 10)
x
#Take the hospital from every state that are ranked at "num" position of Lowest mortality of "outcome"
rankall <- function(outcome, num = "best") {
source("splitDataset.R")
source("chooseRankHospital.R")
dataset<- read.csv("outcome-of-care-measures.csv", colClasses = "character")
validStates<- unique(dataset$State)
#Verify if outcome or state are invalid
if(!is.element(outcome, c("heart attack", "heart failure", "pneumonia"))){
stop("invalid outcome")
}
#If the outcome is "heart attack", the collumn 13 of this dataset will return us the
#Lower Mortality Estimate by heart attack in 30 days
if(outcome == "heart attack"){
splitData <- splitDataset(dataset, 11)
}
else if (outcome == "heart failure"){
splitData <- splitDataset(dataset, 17)
}
else{
splitData <- splitDataset(dataset, 23)
}
#Remove missing data
missingData <- is.na(as.numeric(splitData[,3]))
missingData
splitData <- splitData[!missingData,]
columnState <- c()
columnHospitalName <- c()
i <- 1
while (i < length(validStates)){
currentState <- splitData$State == validStates[i]
currentData <- splitData[currentState,]
currentData <- currentData[order(currentData[,1]),]
currentData <- currentData[order(as.numeric(currentData[,3])),]
columnHospitalName <- c(columnHospitalName, chooseRankHospital(currentData, num))
columnState <- c(columnState, validStates[i])
i <- i + 1
}
return(columnHospitalName)
}
x <- head(rankall("heart attack", 20), 10)
x
#Take the hospital from every state that are ranked at "num" position of Lowest mortality of "outcome"
rankall <- function(outcome, num = "best") {
source("splitDataset.R")
source("chooseRankHospital.R")
dataset<- read.csv("outcome-of-care-measures.csv", colClasses = "character")
validStates<- unique(dataset$State)
#Verify if outcome or state are invalid
if(!is.element(outcome, c("heart attack", "heart failure", "pneumonia"))){
stop("invalid outcome")
}
#If the outcome is "heart attack", the collumn 13 of this dataset will return us the
#Lower Mortality Estimate by heart attack in 30 days
if(outcome == "heart attack"){
splitData <- splitDataset(dataset, 11)
}
else if (outcome == "heart failure"){
splitData <- splitDataset(dataset, 17)
}
else{
splitData <- splitDataset(dataset, 23)
}
#Remove missing data
missingData <- is.na(as.numeric(splitData[,3]))
missingData
splitData <- splitData[!missingData,]
columnState <- c()
columnHospitalName <- c()
i <- 1
while (i < length(validStates)){
currentState <- splitData$State == validStates[i]
currentData <- splitData[currentState,]
currentData <- currentData[order(currentData[,1]),]
currentData <- currentData[order(as.numeric(currentData[,3])),]
columnHospitalName <- c(columnHospitalName, chooseRankHospital(currentData, num))
columnState <- c(columnState, validStates[i])
i <- i + 1
}
return(validStates)
}
x <- head(rankall("heart attack", 20), 10)
x
#Take the hospital from every state that are ranked at "num" position of Lowest mortality of "outcome"
rankall <- function(outcome, num = "best") {
source("splitDataset.R")
source("chooseRankHospital.R")
dataset<- read.csv("outcome-of-care-measures.csv", colClasses = "character")
validStates<- unique(dataset$State)
#Verify if outcome or state are invalid
if(!is.element(outcome, c("heart attack", "heart failure", "pneumonia"))){
stop("invalid outcome")
}
#If the outcome is "heart attack", the collumn 13 of this dataset will return us the
#Lower Mortality Estimate by heart attack in 30 days
if(outcome == "heart attack"){
splitData <- splitDataset(dataset, 11)
}
else if (outcome == "heart failure"){
splitData <- splitDataset(dataset, 17)
}
else{
splitData <- splitDataset(dataset, 23)
}
#Remove missing data
missingData <- is.na(as.numeric(splitData[,3]))
missingData
splitData <- splitData[!missingData,]
columnState <- c()
columnHospitalName <- c()
i <- 1
while (i < length(validStates)){
currentState <- splitData$State == validStates[i]
currentData <- splitData[currentState,]
currentData <- currentData[order(currentData[,1]),]
currentData <- currentData[order(as.numeric(currentData[,3])),]
columnHospitalName <- c(columnHospitalName, chooseRankHospital(currentData, num))
columnState <- c(columnState, validStates[i])
i <- i + 1
}
return(columnHospitalName)
}
x <- head(rankall("heart attack", 20), 10)
x
#Take the hospital from every state that are ranked at "num" position of Lowest mortality of "outcome"
rankall <- function(outcome, num = "best") {
source("splitDataset.R")
source("chooseRankHospital.R")
dataset<- read.csv("outcome-of-care-measures.csv", colClasses = "character")
validStates<- unique(dataset$State)
#Verify if outcome or state are invalid
if(!is.element(outcome, c("heart attack", "heart failure", "pneumonia"))){
stop("invalid outcome")
}
#If the outcome is "heart attack", the collumn 13 of this dataset will return us the
#Lower Mortality Estimate by heart attack in 30 days
if(outcome == "heart attack"){
splitData <- splitDataset(dataset, 11)
}
else if (outcome == "heart failure"){
splitData <- splitDataset(dataset, 17)
}
else{
splitData <- splitDataset(dataset, 23)
}
#Remove missing data
missingData <- is.na(as.numeric(splitData[,3]))
missingData
splitData <- splitData[!missingData,]
columnState <- c()
columnHospitalName <- c()
i <- 1
while (i < length(validStates)){
currentState <- splitData$State == validStates[i]
currentData <- splitData[currentState,]
currentData <- currentData[order(currentData[,1]),]
currentData <- currentData[order(as.numeric(currentData[,3])),]
columnHospitalName <- c(columnHospitalName, chooseRankHospital(currentData, num))
columnState <- c(columnState, validStates[i])
i <- i + 1
}
ranking <- data.frame(State = columnState, HospitalName = columnHospitalName)
return(ranking)
}
x <- head(rankall("heart attack", 20), 10)
x
#Take the hospital from every state that are ranked at "num" position of Lowest mortality of "outcome"
rankall <- function(outcome, num = "best") {
source("splitDataset.R")
source("chooseRankHospital.R")
dataset<- read.csv("outcome-of-care-measures.csv", colClasses = "character")
validStates<- unique(dataset$State)
#Verify if outcome or state are invalid
if(!is.element(outcome, c("heart attack", "heart failure", "pneumonia"))){
stop("invalid outcome")
}
#If the outcome is "heart attack", the collumn 13 of this dataset will return us the
#Lower Mortality Estimate by heart attack in 30 days
if(outcome == "heart attack"){
splitData <- splitDataset(dataset, 11)
}
else if (outcome == "heart failure"){
splitData <- splitDataset(dataset, 17)
}
else{
splitData <- splitDataset(dataset, 23)
}
#Remove missing data
missingData <- is.na(as.numeric(splitData[,3]))
missingData
splitData <- splitData[!missingData,]
columnState <- c()
columnHospitalName <- c()
i <- 1
while (i < length(validStates)){
currentState <- splitData$State == validStates[i]
currentData <- splitData[currentState,]
currentData <- currentData[order(currentData[,1]),]
currentData <- currentData[order(as.numeric(currentData[,3])),]
columnHospitalName <- c(columnHospitalName, chooseRankHospital(currentData, num))
columnState <- c(columnState, validStates[i])
i <- i + 1
}
ranking <- data.frame(State = columnState, HospitalName = columnHospitalName)
ranking <- ranking[order(ranking[,1]),]
return(ranking)
}
x <- head(rankall("heart attack", 20), 10)
x
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source("best.R")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
source("rankhospital.R")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
source("rankall.R")
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r
as.character(subset(r, state == "HI")$hospitalName)
as.character(subset(r, State == "HI")$hospitalName)
as.character(subset(r, State == "HI")$hospital)
r <- rankall("heart failure", 10)
r
r <- rankall("pneumonia", "worst")
er
r
as.character(subset(r, State == "NJ")$HospitalName)
#Take the hospital from every state that are ranked at "num" position of Lowest mortality of "outcome"
rankall <- function(outcome, num = "best") {
source("splitDataset.R")
source("chooseRankHospital.R")
dataset<- read.csv("outcome-of-care-measures.csv", colClasses = "character")
validStates<- unique(dataset$State)
#Verify if outcome or state are invalid
if(!is.element(outcome, c("heart attack", "heart failure", "pneumonia"))){
stop("invalid outcome")
}
#If the outcome is "heart attack", the collumn 13 of this dataset will return us the
#Lower Mortality Estimate by heart attack in 30 days
if(outcome == "heart attack"){
splitData <- splitDataset(dataset, 11)
}
else if (outcome == "heart failure"){
splitData <- splitDataset(dataset, 17)
}
else{
splitData <- splitDataset(dataset, 23)
}
#Remove missing data
missingData <- is.na(as.numeric(splitData[,3]))
missingData
splitData <- splitData[!missingData,]
#These variables will have the values of the final ranking
columnState <- c()
columnHospitalName <- c()
#We take a vector with all the states of the dataset (without repetitions) to compare with the states of the original dataset.
#For each state, we separate the dataset and check which has the lowest mortality rate.
#We store the hospital name and state to create a rankinh data fram
i <- 1
while (i < length(validStates)){
currentState <- splitData$State == validStates[i]
currentData <- splitData[currentState,]
currentData <- currentData[order(currentData[,1]),]
currentData <- currentData[order(as.numeric(currentData[,3])),]
columnHospitalName <- c(columnHospitalName, chooseRankHospital(currentData, num))
columnState <- c(columnState, validStates[i])
i <- i + 1
}
#Create the datadrame with the ranking data and reorder by alfabetic order (by state)
ranking <- data.frame(state = columnState, hospital = columnHospitalName)
ranking <- ranking[order(ranking[,1]),]
return(ranking)
}
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
